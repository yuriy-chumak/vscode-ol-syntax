<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<!-- tips:
	(?:) ia a "match expression, but do not capture it"
	(?=) is a zero-width "positive lookahead assertion"
	(?!) is a zero-width "negative lookahead assertion"
	(?<=) is a zero-width "positive look behind assertion"
	(?<!) is a zero-width "negative look behind assertion"
	-->
<!-- tmLanguage schema:
	https://github.com/martinring/tmlanguage/blob/master/tmlanguage.json -->
<dict>
	<key>comment</key>
	<string>https://macromates.com/manual/en/language_grammars#naming_conventions</string>
	<key>fileTypes</key>
	<array>
		<string>ol</string>
		<string>scm</string>
		<string>lisp</string>
		<string>lsp</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\(</string>
	<key>foldingStopMarker</key>
	<string>\)</string>
	<key>keyEquivalent</key>
	<string>^~L</string>
	<key>name</key>
	<string>Ol</string>
	<key>patterns</key>
	<array>
		<!-- comments (+) -->
		<dict>
			<key>name</key>
			<string>comment.line</string>
			<key>match</key>
			<string>(;).*$</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>comment.block</string>
			<key>begin</key>
			<string>#\|</string>
			<key>end</key>
			<string>\|#</string>
		</dict>

		<!-- REPL -->
		<dict>
			<key>name</key>
			<string>entity.name.type</string>

			<key>match</key>
			<string>(?x)^
				,(
					help|
					words|find|expand|
					d|dis|disassembly|
					libs|libraries|
					l|load|include|
					save|quit
				)(\s|$)
			</string>
		</dict>

		<!-- olvm keywords (template) (+) -->
		<dict>
			<key>name</key>
			<string>keyword.control.olvm</string>

			<key>match</key>
			<string>(?x)               # multiline regex
				(?<=^|\s|[#()\]\[{}|]) # lisp word boundary
				(setq|let-eval|ifeq|brae)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
		</dict>

		<!-- olvm keywords (+) -->
		<dict>
			<key>name</key>
			<string>keyword.control.olvm</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(vm:(
					new|make|alloc|
					cast|set!|
					add|mul|sub|div|shr|shl|fp1|fp2|
					and|ior|xor|
					version|features|vmax|vsize|
					pin|unpin|deref|
					run|mcp|nop|exit)
				|arity-error
				|ff:(black|red|toggle|red\?|right\?)
				)
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

        <!-- ol primitives (+) -->
		<dict>
			<key>name</key>
			<string>keyword.control.ol</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(syntax-error|runtime-error|assert|error|raise|raise-continuable|clock|syscall|\*features\*)
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

        <!-- macro/libraries (+) -->
		<dict>
			<key>name</key>
			<string>keyword.control</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(define-syntax|syntax-rules|define-library|import|export|exports|cond-expand|define-macro)
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

		<!-- not implemented r7rs top-level features -->
		<dict>
			<key>name</key>
			<string>invalid</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(include|include-ci|define-record-type)
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

        <!-- vm constants (+) -->
		<dict>
			<key>name</key>
			<string>constant.language</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(
					\#(false|f|F|true|t|T|null|n|N|empty|e|E|eof|\(\))|
					'\(\)|
					\#ff\(\)     # because #ff() === #empty
				)
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

		<!-- ol constants (+) -->
		<dict>
			<key>name</key>
			<string>constant.character.escape</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(\#\\(
					.|
					null|alarm|backspace|tab|newline|return|escape|space|delete|
					vtab|formfeed|percent|ampersand|comma|slash|colon|semicolon|backslash # new constants
				))
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

		<!-- symbols (+) -->
		<!-- regular symbol (+) -->
		<dict>
			<key>name</key>
			<string>entity.name.tag</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}])
				('|`)\s*
				([^\s()\[\]{}#|`,.]+)
			</string>
		</dict>
		<!-- symbol enclosed in vertical lines (+) -->
		<dict>
			<!-- Note: Regular expressions in TextMate grammars will not match across multiple lines.
				This is a fundamental limitation of the format.
				So, the only way to match content across multiple lines is to chain begin/end matches. -->
			<key>name</key>
			<string>entity.name.tag</string>

			<key>begin</key>
			<string>(?x)
				(?:^|\s|[#()\]\[{}])
				('|`)\s*\|
			</string>
			<key>end</key>
			<string>\|</string>
		</dict>
        <!-- symbol functions (+) -->
		<dict>
			<key>name</key>
			<string>entity.name.function.symbols</string>

			<key>match</key>
			<string>(?x)
				(?:^|\s|[#()\]\[{}])
				(
					symbol\?|symbol=\?|string->symbol
				)
				(?=\s|[#()\]\[{}]|$)
			</string>
        </dict>

		<!-- builtin regular expressions -->
		<!-- TODO: add subpatterns (like in strings) -->
		<dict>
			<key>name</key>
			<string>keyword.other</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(
					(m|c)/             # match / cut
					((\\/)|[^/])+
					/
				)|(                    # grab
					g/
					((\\/)|[^/])+
					/g?
				)|(
					s/                 # substitute
					((\\/)|[^/])+
					/
					((\\/)|[^/])*
					/g?
				)
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

		<!-- numbers. todo: add complex and rational numbers -->
		<!-- TODO: rework please! -->
		<dict>
			<key>match</key>
			<string>(?:^|\s|[#()\]\[{}])(([0-9]+)|(#((b[01]+)|(o[0-7]+)|(d[0-9]+)|(x[0-9a-fA-F]+)))|\+nan\.0|\+inf\.0|\-inf\.0)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
			</dict>
		</dict>

		<!-- strings (+) -->
		<dict>
			<key>name</key>
			<string>string.quoted.double</string>

			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin</string>
				</dict>
			</dict>

			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end</string>
				</dict>
			</dict>

			<!-- string subpatters -->
			<key>patterns</key>
			<array>
				<dict> <!-- ESC sequences -->
					<key>match</key>
					<string>\\[abtnvfre0"\\]</string>
					<key>name</key>
					<string>constant.character.escape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\x[0123456789abcdefABCDEF]+;</string>
					<key>name</key>
					<string>constant.character.escape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.escape</string>
				</dict>
			</array>
		</dict>
        <!-- string functions (+) -->
		<dict>
			<key>name</key>
			<string>entity.name.function.strings</string>

			<key>match</key>
			<string>(?x)
				(?:^|\s|[#()\]\[{}])
				(
					string|make-string|substring|string-map|
					runes->string|bytes->string|string->bytes|string->runes|list->string|string->list|symbol->string|string->number|number->string|
					string-ref|string-length|string-append|string-copy|
					c-string|null-terminate|
					finish-string|format-string|format-quoted-string|
					(string|string-eq|string=|string<|string>|string<=|string>=|string-ci=|string-ci<|string-ci>|string-ci<=|string-ci>=)\?
				)
				(?=\s|[#()\]\[{}]|$)
			</string>
        </dict>

        <!-- r7rs -->
		<!-- special case: function definitions -->
		<!-- TODO: rework -->
		<dict>
			<key>match</key>
			<string>(?:\()(define)\s+\(([^\[\]`#(){}\|;'",. ]*)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
        </dict>

        <!-- builtin predicates (+) -->
		<dict>
			<key>name</key>
			<string>keyword.control.predicate</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				((
					eq|eqv|equal|less|greater|fless|
					null|empty|eof|value|reference|
					bytecode|function|
					ff|pair
				)\?)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
		</dict>
        <!-- other predicates (+) -->
		<dict>
			<key>name</key>
			<string>entity.name.function.predicate</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				((
					boolean|port|
					integer|rational|real|complex|number|
					procedure|list|
					has|boolean= # todo: move to proper place
				)\?)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
		</dict>

        <!-- basic r7rs functions -->
		<dict>
			<key>name</key>
			<string>keyword.control</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(
					Î»|lambda|quote|values|apply|apply/cc|
					call-with-current-continuation|call/cc|
					cons|ref|type|size|set-ref|values-apply|vector-apply|ff-apply|
					car|cdr|
					caar|cadr|cdar|cddr|
					caaar|caadr|cadar|caddr|cdaar|cdadr|cddar|cdddr|
					caaaar|caaadr|caadar|caaddr|cadaar|cadadr|caddar|cadddr|cdaaar|cdaadr|cdadar|cdaddr|cddaar|cddadr|cdddar|cddddr|
					idf|\+\+|--|
					cons\*
				)
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

		<!-- non-functional functions -->
		<dict>
			<key>name</key>
			<string>keyword.control.!</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(
					set!|set-ref!|set-car!|set-cdr!
				)
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

		<!-- ol object types -->
		<dict>
			<key>name</key>
			<string>constant.numeric.type</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|])
				(type-(
					pair|symbol|const|port|
					enum[+-]|int[+-]|
					rational|complex|inexact|
					bytecode|procedure|closure|constructor|
					vector|bytevector|
					string|string-wide|string-dispatch|
					thread-state|vptr
				))
				(?=[#\s()\]\[{}`,.]|$)
			</string>
		</dict>

        <!-- common r7rs functions (TODO: fix this) -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(and|or|not|delay|force|quasiquote|define|length|append|reverse|ilist|call-with-values|define-values|list-ref|exec|yield|halt|wait|set|put|get)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>entity.name.function</string>
		</dict>

		<!-- local bindings -->
		<dict>
			<key>name</key>
			<string>entity.name.tag.css</string>

			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(
					letrec|let|let\*|let\*/cc|begin|
					if|then|else|when|unless|cond|case|case-lambda|
					map|fold|foldr|for-each
				)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
		</dict>

        <!-- other r7rs functions (TODO: fix this) -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(
					inexact\??|exact\??|exact->inexact|inexact->exact|
					memq|memv|member|assq|assv|assoc|
					list-tail|list-set!|list-copy|list|make-list|
					dlopen|dlsym|dlclose
				)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>entity.name.function</string>
		</dict>

        <!-- libraries -->
        <!-- (scheme vector) (+) -->
		<dict>
			<key>name</key>
			<string>entity.name.function.scheme.vector</string>

			<key>match</key>
			<string>(?x)
				(?:^|\s|[#()\]\[{}])
				(
					vector\??|make-vector|
					vector-length|vector-ref|vector-set!|vector->list|list->vector|vector->string|string->vector|vector-copy|vector-copy!|vector-append|vector-fill!|vector-for-each|vector-map|vector-fold|vector-foldr
				)
				(?=\s|[#()\]\[{}]|$)
			</string>
        </dict>

        <!-- (scheme bytevector) (+) -->
		<dict>
			<key>name</key>
			<string>entity.name.function.scheme.bytevector</string>

			<key>match</key>
			<string>(?x)
				(?:^|\s|[#()\]\[{}])
				(
					bytevector\??|make-bytevector|
					bytevector-length|bytevector-u8-ref|bytevector-u8-set!|
					bytevector-copy|bytevector-copy!|bytevector-append|
					utf8->string|string->utf8|
					bytevector->list|list->bytevector
				)
				(?=\s|[#()\]\[{}]|$)
			</string>
        </dict>

		<!-- (scheme char) -->
		<dict>
			<key>name</key>
			<string>entity.name.function.scheme.char</string>

			<key>match</key>
			<string>(?x)
				(?:^|\s|[#()\]\[{}])
				(
					char\?|
					(char(<=|<|=|>=|>)\?)|
					(char-(
						(ci=|ci<|ci>|ci<=|ci>=)\?|
						upcase|
						(alphabetic|numeric|whitespace)\?))|
					char->integer|integer->char|
					digit-value
				)
				(?=\s|[#()\]\[{}]|$)
			</string>
        </dict>

<!-- ******************************************************************************************* -->

        <!-- (owl io) -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?:^|\s|[#()\]\[{}])
				(
					open-output-file|open-binary-output-file|open-input-file|open-binary-input-file|flush-port|close-port|wait-write|blocks->port|closing-blocks->port|fd->bytevector|file->bytevector|bytevector->file|file->blob|file->vector|file->list|vector->file|port->bytestream|file->bytestream|bytestream->port|bytestream->file|port->string|file->string|open-input-string|open-output-string|get-output-string|stdin|stdout|stderr|display-to|print-to|display|print|print\*|print\*-to|write|writer-to|
					write-(to|simple|bytes|bytevector|vector|bytestream|char|string|u8)|
					newline|get-block|try-get-block|lines|system-print|system-println|system-stderr|fasl-save|fasl-load
				)
				(?=\s|[#()\]\[{}]|$)
			</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.io</string>
				</dict>
			</dict>
        </dict>
        <!-- (owl list) -->
		<dict>
			<key>match</key>
			<string>(?:^|\s|[#()\]\[{}])(null|zip|for|iota|has\?|getq|last|drop-while|mem|fold-map|foldr-map|append|reverse|keep|remove|all|some|smap|unfold|take-while|fold2|first|halve)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.list</string>
				</dict>
			</dict>
        </dict>
        <!-- (owl interop) -->
		<dict>
			<key>match</key>
			<string>(?:^|\s|[#()\]\[{}])(await|async|async-linked|async-named|actor|actor-linked|coroutine|coroutine-linked|sleep|accept-mail|wait-mail|check-mail|release-thread|catch-thread|single-thread\?|kill|mail|return-mails|exit-thread|shutdown|poll-mail-from|running-threads|par\*|start-nested-parallel-computation|wrap-the-whole-world-to-a-thunk|par|por\*|por)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.interop</string>
				</dict>
			</dict>
        </dict>

        <!-- (owl math) -->
		<dict>
			<key>name</key>
			<string>entity.name.function.math</string>

			<key>match</key>
			<string>(?x)
				(?:^|\s|[#()\]\[{}])
				(
					[*+-/<=>]|
					<<|<=|>>|>=|\*\*|
					(zero|positive|negative|odd|even|natural)\?|
					rational|complex|
					quotient|remainder|modulo|numerator|denominator|
					max|min|abs|
					floor|ceiling|truncate|round|ceil|
					band|bor|bxor|
					quot|quotrem|divmod|
					negate|divide|
					gcd|gcdl|lcm|ncr|npr|fib|
					square|sum|product|expt|expt-mod|
					ilog|ilog2|isqrt|iroot|iexpt|
					format-number|
					exact-integer-sqrt|rationalize|
					[!^]|
					dlog|dlog-simple|
					histogram|bisect
				)
				(?=\s|[#()\]\[{}]|$)
			</string>
        </dict>

	</array>

	<key>scopeName</key>
	<string>source.lisp</string>
	<key>uuid</key>
	<string>3a6530da-7929-11e8-adc0-fa7ae01bbebc</string>
</dict>
</plist>
