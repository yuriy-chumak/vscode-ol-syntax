<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<!-- tips:
	(?:) ia a "match expression, but do not capture it"
	(?=) is a zero-width "positive lookahead assertion"
	(?!) is a zero-width "negative lookahead assertion"
	(?<=) is a zero-width "positive look behind assertion"
	(?<!) is a zero-width "negative look behind assertion"
	-->
<dict>
	<key>comment</key>
	<string>https://macromates.com/manual/en/language_grammars#naming_conventions</string>
	<key>fileTypes</key>
	<array>
		<string>ol</string>
		<string>scm</string>
		<string>lisp</string>
		<string>lsp</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\(</string>
	<key>foldingStopMarker</key>
	<string>\)</string>
	<key>keyEquivalent</key>
	<string>^~L</string>
	<key>name</key>
	<string>Ol</string>
	<key>patterns</key>
	<array>
		<!-- comments (+) -->
		<dict>
			<key>match</key>
			<string>(;).*$</string>
			<key>name</key>
			<string>comment.line</string>

			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>begin</key>
			<string>#\|</string>
			<key>end</key>
			<string>\|#</string>
			<key>name</key>
			<string>comment.block</string>
		</dict>

		<!-- keywords (+) -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(setq|let-eval|ifeq|brae)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>keyword.control.ol</string>
		</dict>

		<!-- vm keywords (+) -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(vm:(
					new|make|alloc|
					cast|set!|
					add|mul|sub|div|shr|shl|fp1|fp2|
					and|ior|xor|
					version|features|vmax|vsize|
					pin|unpin|deref|
					run|mcp|
					exit)
				|arity-error)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>keyword.control.ol</string>
		</dict>

        <!-- macro/libraries (+) -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(define-syntax|syntax-rules|define-library|import|export|cond-expand|begin|define-macro)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>keyword.control</string>
		</dict>

        <!-- constants (+) -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(\#(false|f|F|true|t|T|null|n|N|empty|e|E|eof|\(\))|'\(\))
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>constant.language.ol</string>
		</dict>

		<!-- symbols (+) -->
		<dict> <!-- regular symbol-->
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}]) # word boundary
				('|`)\s*
				([^\s()\[\]{}#|`,.]+) # not a non word chars
			</string>
			<key>name</key>
			<string>entity.name.tag</string>
		</dict>
		<!-- Note: Regular expressions in TextMate grammars will not match across multiple lines.
		     This is a fundamental limitation of the format.
		     The only way to match content across multiple lines is to chain begin/end matches. -->
		<dict> <!-- symbol enclosed in vertical lines -->
			<key>begin</key>
			<string>(?x)
				(?:^|\s|[#()\]\[{}]) # word boundary
				('|`)\s*\|
			</string>
			<key>end</key>
			<string>\|</string>
			<key>name</key>
			<string>entity.name.tag</string>
		</dict>

		<!-- builtin regular expressions -->
		<dict>
			<!-- match m/.../ or split c/.../ -->
			<key>begin</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}]) # word boundary
				(m|c)/
			</string>
			<key>end</key>
			<string>(?x)
				/
				(?=[#\s()\]\[{}|`,.]|$)
			</string>
			<key>name</key>
			<string>keyword.other</string>
		</dict>
		<dict>
			<!-- replace s/.../.../-->
			<key>begin</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}]) # word boundary
				s/
			</string>
			<key>end</key>
			<string>(?x)
				/g?
				(?=[#\s()\]\[{}|`,.]|$)
			</string>
			<key>name</key>
			<string>keyword.other</string>
		</dict>

		<!-- character constants (+) -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(\#\\(.|null|alarm|backspace|tab|newline|return|escape|space|delete))
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>constant.character.escape</string>
		</dict>
		
		<!-- numbers. todo: add complex and rational numbers -->
		<dict>
			<key>match</key>
			<string>(?:^|\s|[#()\]\[{}])(([0-9]+)|(#((b[01]+)|(o[0-7]+)|(d[0-9]+)|(x[0-9a-fA-F]+)))|\+nan\.0|\+inf\.0|\-inf\.0)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.scheme</string>
				</dict>
			</dict>
		</dict>

		<!-- strings (+) -->
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double</string>

			<!-- string subpatters -->
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[abtnvfre0"\\]</string>
					<key>name</key>
					<string>constant.character.escape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\x[0123456789abcdefABCDEF]+;</string>
					<key>name</key>
					<string>constant.character.escape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.escape</string>
				</dict>
			</array>
		</dict>

        <!-- r7rs -->
		<!-- special case: function defines -->
		<dict>
			<key>match</key>
			<string>(?:\()(define)\s+\(([^\[\]`#(){}\|;'",. ]*)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.scheme</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.scheme</string>
				</dict>
			</dict>
        </dict>

        <!-- vm primitives -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(syntax-error|runtime-error|assert|error|raise|raise-continuable|clock|syscall|\*features\*)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>keyword.control.ol</string>
		</dict>

        <!-- builtin predicates -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				((eq|eqv|equal|less|greater|fless|has|null|empty|eof|value|reference|zero|integer|rational|complex|real|number|exact|inexact|boolean|pair|symbol|vector|port|procedure|bytecode|function|ff|symbol=|list|bytevector|string)\?)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>keyword.control.predicate</string>
		</dict>

        <!-- basic r7rs functions -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(Î»|lambda|quote|values|apply|apply/cc|call-with-current-continuation|call/cc|cons|car|cdr|ref|type|size|set-ref|set-ref!|values-apply|vector-apply|ff-apply|ff:black|ff:red|ff:toggle|ff:red\?|ff:right\?)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>keyword.control</string>
		</dict>

        <!-- common r7rs functions -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(letrec|let|let\*|if|unless|when|cond|case|case-lambda|and|or|not|delay|force|quasiquote|define|length|append|reverse|ilist|call-with-values|define-values|list-ref|map|exec|yield|halt|wait|set|set!|set-car!|set-cdr!|put|get|then|else|let\*/cc)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>entity.name.function</string>
		</dict>

        <!-- other r7rs functions -->
		<dict>
			<key>match</key>
			<string>(?x)
				(?<=^|\s|[#()\]\[{}|]) # word boundary
				(inexact|exact|exact->inexact|inexact->exact|list-tail|list-set!|memq|memv|member|list-copy|bytevector|list|make-bytevector)
				(?=[#\s()\]\[{}`,.]|$) # not a word chars
			</string>
			<key>name</key>
			<string>entity.name.function</string>
		</dict>

        <!-- libraries -->
        <!-- (owl strings) /incomplete -->
		<dict>
			<key>match</key>
			<string>(?:^|\s|[#()\]\[{}])(string|make-string|runes->string|bytes->string|string->bytes|string->runes|list->string|string->list|string-length|substring|string-eq\?|string-append|c-string|null-terminate|finish-string|render-string|render-quoted-string|symbol->string|string->symbol|string-ref|(string=|string<|string>|string<=|string>=|string-ci=|string-ci<|string-ci>|string-ci<=|string-ci>=)\?)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.strings</string>
				</dict>
			</dict>
        </dict>
        <!-- (scheme vector) /incomplete -->
		<dict>
			<key>match</key>
			<string>(?:^|\s|[#()\]\[{}])(make-vector|vector|vector-length|vector-ref|vector-set!|vector->list|list->vector|vector->string|string->vector|vector-copy|vector-copy!|vector-append|vector-fill!|vector-for-each|vector-map|vector-fold|vector-foldr)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.strings</string>
				</dict>
			</dict>
        </dict>
        <!-- (owl io) -->
		<dict>
			<key>match</key>
			<string>(?:^|\s|[#()\]\[{}])(open-output-file|open-binary-output-file|open-input-file|open-binary-input-file|flush-port|close-port|wait-write|blocks->port|closing-blocks->port|fd->bytevector|file->bytevector|bytevector->file|file->blob|write-blob|file->vector|file->list|vector->file|write-vector|port->bytestream|file->bytestream|stdin|stdout|stderr|display-to|print-to|display|print|print\*|print\*-to|write|writer-to|write-to|write-bytes|write-bytevector|newline|get-block|try-get-block|lines|system-print|system-println|system-stderr|fasl-save|fasl-load)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.io</string>
				</dict>
			</dict>
        </dict>
        <!-- (owl list) -->
		<dict>
			<key>match</key>
			<string>(?:^|\s|[#()\]\[{}])(null|caar|cadr|cdar|cddr|caaar|caadr|cadar|caddr|cdaar|cdadr|cddar|cdddr|zip|for|fold|foldr|for-each|iota|has\?|getq|last|drop-while|mem|fold-map|foldr-map|append|reverse|keep|remove|all|some|smap|unfold|take-while|fold2|first|halve|caaaar|caaadr|caadar|caaddr|cadaar|cadadr|caddar|cadddr|cdaaar|cdaadr|cdadar|cdaddr|cddaar|cddadr|cdddar|cddddr)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.list</string>
				</dict>
			</dict>
        </dict>
        <!-- (owl interop) -->
		<dict>
			<key>match</key>
			<string>(?:^|\s|[#()\]\[{}])(await|async|async-linked|async-named|actor|actor-linked|coroutine|coroutine-linked|sleep|accept-mail|wait-mail|check-mail|release-thread|catch-thread|single-thread\?|kill|mail|return-mails|exit-thread|shutdown|poll-mail-from|running-threads|par\*|start-nested-parallel-computation|wrap-the-whole-world-to-a-thunk|par|por\*|por)(?=\s|[#()\]\[{}]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.interop</string>
				</dict>
			</dict>
        </dict>

	</array>

	<key>scopeName</key>
	<string>source.lisp</string>
	<key>uuid</key>
	<string>3a6530da-7929-11e8-adc0-fa7ae01bbebc</string>
</dict>
</plist>
